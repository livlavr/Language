//OPERATOR(operation, latex_output, EvalValue, LeftZeroSimplification,     RightZeroSimplification,
//                                             LeftOneSimplification,      RightOneSimplification,
//                                             LeftMinusOneSimplification, RightMinusOneSimplification,
//                                             Differentiated)

OPERATOR(ADD, {
    WriteBinaryOperator(" + ");
}, {
    EvalTwoArgsOperation(+);
}, {
    I_MADE_CHANGES;
    ReplaceNodes(tree, node, (*node)->right);
}, {
    I_MADE_CHANGES;
    ReplaceNodes(tree, node, (*node)->left);
}, {{}}, {{}}, {{}}, {{}}, {
    diff_result = Add(D(CP(LEFT)), D(CP(RIGHT)));
}
)

OPERATOR(SUB, {
    WriteBinaryOperator(" - ");
}, {
    EvalTwoArgsOperation(-);
}, {
    I_MADE_CHANGES;
    ReplaceNodes(tree, node, Mul(Num(-1), CP((*node)->right)));
}, {
    I_MADE_CHANGES;
    ReplaceNodes(tree, node, (*node)->left);
}, {{}}, {{}}, {{}}, {{}}, {
    diff_result = Sub(D(CP(LEFT)), D(CP(RIGHT)));
}
)

OPERATOR(MUL, {
    WriteBinaryOperator(" \\cdot ");
}, {
    EvalTwoArgsOperation(*);
}, {
    I_MADE_CHANGES;
    ReplaceNodes(tree, node, Num(0));
}, {
    I_MADE_CHANGES;
    ReplaceNodes(tree, node, Num(0));
}, {
    I_MADE_CHANGES;
    ReplaceNodes(tree, node, (*node)->right);
}, {
    I_MADE_CHANGES;
    ReplaceNodes(tree, node, (*node)->left);
}, {{}}, {{}}, {
    diff_result = Add(Mul(D(CP(LEFT)), CP(RIGHT)), Mul(CP(LEFT), D(CP(RIGHT))));
}
)

OPERATOR(DIV, {
    fprintf(latex_file, "\\frac{");
    if(LEFT)  RecursiveWriteToLatex(tree, LEFT, latex_file);
    fprintf(latex_file, "}");
    fprintf(latex_file, "{");
    if(RIGHT)  RecursiveWriteToLatex(tree, RIGHT, latex_file);
    fprintf(latex_file, "}");
}, {
    EvalTwoArgsOperation(/);
}, {
    I_MADE_CHANGES;
    ReplaceNodes(tree, node, Num(0));
}, {{}}, {{}}, {
    I_MADE_CHANGES;
    ReplaceNodes(tree, node, (*node)->left);
}, {{}}, {
    I_MADE_CHANGES;
    ReplaceNodes(tree, node, Mul(Num(-1), CP((*node)->left)));
}, {
    diff_result = Div(Sub(Mul(D(CP(LEFT)), CP(RIGHT)), Mul(CP(LEFT), D(CP(LEFT)))), Pow(CP(RIGHT), Num(2)));
}
)

OPERATOR(POW, {
    if(LEFT)  RecursiveWriteToLatex(tree, LEFT, latex_file);
    fprintf(latex_file, "^{");
    if(RIGHT)  RecursiveWriteToLatex(tree, RIGHT, latex_file);
    fprintf(latex_file, "}");
}, {
    double result = 0;
    result = pow(GetValue(left), GetValue(right));
    ReplaceNodes(tree, node, Num(result));
}, {
    I_MADE_CHANGES;
    ReplaceNodes(tree, node, Num(0));
}, {
    I_MADE_CHANGES;
    ReplaceNodes(tree, node, Num(1));
}, {
    I_MADE_CHANGES;
    ReplaceNodes(tree, node, Num(1));
}, {
    I_MADE_CHANGES;
    ReplaceNodes(tree, node, (*node)->left);
}, {{}}, {
    I_MADE_CHANGES;
    ReplaceNodes(tree, node, Div(Num(1), CP((*node)->left)));
}, {
    if(RIGHT->value.type == number) {
        diff_result = Mul(Mul(CP(RIGHT), Pow(CP(LEFT), Sub(CP(RIGHT), Num(1)))), D(CP(LEFT)));
    }
    else if(LEFT->value.type == number) {
        diff_result = Mul(Mul(CP(node), Ln(CP(LEFT))), D(CP(RIGHT)));
    }
    else {
        diff_result = D(Pow((Num(exp(1))), Mul(CP(RIGHT), Ln(CP(LEFT)))));
    }
}
)

OPERATOR(SQRT, {
    WriteUnaryOperator("\\sqrt", "{", "}");
}, {
    EvalFunction(sqrt);
}, {{}}, {{}}, {{}}, {{}}, {{}}, {{}}, {
    diff_result = Mul(Div(Num(1), Mul(Num(2), CP(LEFT))), D(CP(LEFT)));
}
)

OPERATOR(SIN, {
    WriteUnaryOperator("\\sin", "(", ")");
}, {
    EvalFunction(sin);
}, {{}}, {{}}, {{}}, {{}}, {{}}, {{}}, {
    diff_result = Mul(Cos(CP(LEFT)), D(CP(LEFT)));
}
)

OPERATOR(COS, {
    WriteUnaryOperator("\\cos", "(", ")");
}, {
    EvalFunction(cos);
}, {{}}, {{}}, {{}}, {{}}, {{}}, {{}}, {
    diff_result = Mul(Mul(Num(-1), Sin(CP(LEFT))), D(CP(LEFT)));
}
)

OPERATOR(LN, {
    WriteUnaryOperator("\\ln", "(", ")");

}, {
    EvalFunction(log);
}, {{}}, {{}}, {{}}, {{}}, {{}}, {{}}, {
    diff_result = Mul(Div(Num(1), CP(LEFT)), D(CP(LEFT)));
}
)

OPERATOR(EXP, {
    WriteUnaryOperator("e^", "{", "}");
}, {
    EvalFunction(exp);
}, {{}}, {{}}, {{}}, {{}}, {{}}, {{}}, {
    diff_result = Mul(CP(LEFT), D(CP(LEFT)));
}
)
