//Operator_struct========================================================================================|
//
//  OPERATOR(NodeType, Node_sign, EvalValue, LeftZeroSimplification,     RightZeroSimplification,
//                                           LeftOneSimplification,      RightOneSimplification,
//                                           LeftMinusOneSimplification, RightMinusOneSimplification,
//                                           Differentiated)
//
//Description============================================================================================|
//
//   1. Constant           Число в виде десятичной дроби
//   2. Identifier         Индекс идентификатора в общей таблице имен
//   3. Keyword            Номер ключевого слова
//   4. FunctionDefinition Индекс идентификатора функции, задаваемой данным узлом
//   5. Parameters         Нет хранимой величины
//   6. VarDeclaration     Идентификатор создаваемой переменной
//   7. Call               Вызов функции
//
//Operators_description==================================================================================|
//['A-Z', 'a-z', 'А-Я', 'а-я', '0-9', '_']
//isnum(), isalpha(), == '_'

OPERATOR(CONSTANT, {
    if(scanf())
}, {
    EvalTwoArgsOperation(+);
}, {
    (*simplifications_number)++;
    ReplaceNodes(tree, node, (*node)->right);
}, {
    (*simplifications_number)++;
    ReplaceNodes(tree, node, (*node)->left);
}, {{}}, {{}}, {{}}, {{}}, {
    diff_result = Add(D(CP(node->left)), D(CP(node->right)));
}
)

OPERATOR(IDENTIFIER, {{}}, {{}}, {{}}, {{}}, {{}}, {{}}, {{}}, {{}}, {{}}
)

OPERATOR(KEYWORD, {
[]
}, {
    EvalTwoArgsOperation(+);
}, {
    (*simplifications_number)++;
    ReplaceNodes(tree, node, (*node)->right);
}, {
    (*simplifications_number)++;
    ReplaceNodes(tree, node, (*node)->left);
}, {{}}, {{}}, {{}}, {{}}, {
    diff_result = Add(D(CP(node->left)), D(CP(node->right)));
}
)

OPERATOR(FUNCTION_DEFINITION, {

}, {
    EvalTwoArgsOperation(+);
}, {
    (*simplifications_number)++;
    ReplaceNodes(tree, node, (*node)->right);
}, {
    (*simplifications_number)++;
    ReplaceNodes(tree, node, (*node)->left);
}, {{}}, {{}}, {{}}, {{}}, {
    diff_result = Add(D(CP(node->left)), D(CP(node->right)));
}
)

OPERATOR(PARAMETERS, {

}, {
    EvalTwoArgsOperation(+);
}, {
    (*simplifications_number)++;
    ReplaceNodes(tree, node, (*node)->right);
}, {
    (*simplifications_number)++;
    ReplaceNodes(tree, node, (*node)->left);
}, {{}}, {{}}, {{}}, {{}}, {
    diff_result = Add(D(CP(node->left)), D(CP(node->right)));
}
)

OPERATOR(VAR_DECLARATION, {

}, {
    EvalTwoArgsOperation(+);
}, {
    (*simplifications_number)++;
    ReplaceNodes(tree, node, (*node)->right);
}, {
    (*simplifications_number)++;
    ReplaceNodes(tree, node, (*node)->left);
}, {{}}, {{}}, {{}}, {{}}, {
    diff_result = Add(D(CP(node->left)), D(CP(node->right)));
}
)

OPERATOR(CALL, {

}, {
    EvalTwoArgsOperation(+);
}, {
    (*simplifications_number)++;
    ReplaceNodes(tree, node, (*node)->right);
}, {
    (*simplifications_number)++;
    ReplaceNodes(tree, node, (*node)->left);
}, {{}}, {{}}, {{}}, {{}}, {
    diff_result = Add(D(CP(node->left)), D(CP(node->right)));
}
)

OPERATOR(ADD, {
    WriteBinaryOperator(" + ");
}, {
    EvalTwoArgsOperation(+);
}, {
    (*simplifications_number)++;
    ReplaceNodes(tree, node, (*node)->right);
}, {
    (*simplifications_number)++;
    ReplaceNodes(tree, node, (*node)->left);
}, {{}}, {{}}, {{}}, {{}}, {
    diff_result = Add(D(CP(node->left)), D(CP(node->right)));
}
)

OPERATOR(SUB, {
    WriteBinaryOperator(" - ");
}, {
    EvalTwoArgsOperation(-);
}, {
    (*simplifications_number)++;
    ReplaceNodes(tree, node, Mul(Num(-1), CP((*node)->right)));
}, {
    (*simplifications_number)++;
    ReplaceNodes(tree, node, (*node)->left);
}, {{}}, {{}}, {{}}, {{}}, {
    diff_result = Sub(D(CP(node->left)), D(CP(node->right)));
}
)

OPERATOR(MUL, {
    WriteBinaryOperator(" \\cdot ");
}, {
    EvalTwoArgsOperation(*);
}, {
    (*simplifications_number)++;
    ReplaceNodes(tree, node, Num(0));
}, {
    (*simplifications_number)++;
    ReplaceNodes(tree, node, Num(0));
}, {
    (*simplifications_number)++;
    ReplaceNodes(tree, node, (*node)->right);
}, {
    (*simplifications_number)++;
    ReplaceNodes(tree, node, (*node)->left);
}, {{}}, {{}}, {
    diff_result = Add(Mul(D(CP(node->left)), CP(node->right)), Mul(CP(node->left), D(CP(node->right))));
}
)

OPERATOR(DIV, {
    fprintf(latex_file, "\\frac{");
    if(node->left)  RecursiveWriteToLatex(tree, node->left, latex_file);
    fprintf(latex_file, "}");
    fprintf(latex_file, "{");
    if(node->right)  RecursiveWriteToLatex(tree, node->right, latex_file);
    fprintf(latex_file, "}");
}, {
    EvalTwoArgsOperation(/);
}, {
    (*simplifications_number)++;
    ReplaceNodes(tree, node, Num(0));
}, {{}}, {{}}, {
    (*simplifications_number)++;
    ReplaceNodes(tree, node, (*node)->left);
}, {{}}, {
    (*simplifications_number)++;
    ReplaceNodes(tree, node, Mul(Num(-1), CP((*node)->left)));
}, {
    diff_result = Div(Sub(Mul(D(CP(node->left)), CP(node->right)), Mul(CP(node->left), D(CP(node->left)))), Pow(CP(node->right), Num(2)));
}
)

OPERATOR(POW, {
    if(node->left)  RecursiveWriteToLatex(tree, node->left, latex_file);
    fprintf(latex_file, "^{");
    if(node->right)  RecursiveWriteToLatex(tree, node->right, latex_file);
    fprintf(latex_file, "}");
}, {
    double result = 0;
    result = pow((*node)->left->value.data.double_value, (*node)->right->value.data.double_value);
    ReplaceNodes(tree, node, Num(result));
}, {
    (*simplifications_number)++;
    ReplaceNodes(tree, node, Num(0));
}, {
    (*simplifications_number)++;
    ReplaceNodes(tree, node, Num(1));
}, {
    (*simplifications_number)++;
    ReplaceNodes(tree, node, Num(1));
}, {
    (*simplifications_number)++;
    ReplaceNodes(tree, node, (*node)->left);
}, {{}}, {
    (*simplifications_number)++;
    ReplaceNodes(tree, node, Div(Num(1), CP((*node)->left)));
}, {
    if(node->right->value.type == number) {
        diff_result = Mul(Mul(CP(node->right), Pow(CP(node->left), Sub(CP(node->right), Num(1)))), D(CP(node->left)));
    }
    else if(node->left->value.type == number) {
        diff_result = Mul(Mul(CP(node), Ln(CP(node->left))), D(CP(node->right)));
    }
    else {
        diff_result = D(Pow((Num(exp(1))), Mul(CP(node->right), Ln(CP(node->left)))));
    }
}
)

OPERATOR(SQRT, {
    WriteUnaryOperator("\\sqrt", "{", "}");
}, {
    EvalFunction(sqrt);
}, {{}}, {{}}, {{}}, {{}}, {{}}, {{}}, {
    diff_result = Mul(Div(Num(1), Mul(Num(2), CP(node->left))), D(CP(node->left)));
}
)

OPERATOR(SIN, {
    WriteUnaryOperator("\\sin", "(", ")");
}, {
    EvalFunction(sin);
}, {{}}, {{}}, {{}}, {{}}, {{}}, {{}}, {
    diff_result = Mul(Cos(CP(node->left)), D(CP(node->left)));
}
)

OPERATOR(COS, {
    WriteUnaryOperator("\\cos", "(", ")");
}, {
    EvalFunction(cos);
}, {{}}, {{}}, {{}}, {{}}, {{}}, {{}}, {
    diff_result = Mul(Mul(Num(-1), Sin(CP(node->left))), D(CP(node->left)));
}
)

OPERATOR(LN, {
    WriteUnaryOperator("\\ln", "(", ")");

}, {
    EvalFunction(log);
}, {{}}, {{}}, {{}}, {{}}, {{}}, {{}}, {
    diff_result = Mul(Div(Num(1), CP(node->left)), D(CP(node->left)));
}
)

OPERATOR(EXP, {
    WriteUnaryOperator("e^", "{", "}");
}, {
    EvalFunction(exp);
}, {{}}, {{}}, {{}}, {{}}, {{}}, {{}}, {
    diff_result = Mul(CP(node->left), D(CP(node->left)));
}
)
